{"ast":null,"code":"// import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst initialAuthState = {\n  isAuthenticated: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\n\n// const counterReducer = (state = initialState, action) => {\n//     if (action.type === 'increment') {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter,\n//         };\n//     }\n\n//     if (action.type === 'increase') {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         };\n//     }\n\n//     if (action.type === 'decrement'){\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n\n//     if (action.type === 'toggle'){\n//         return {\n//             //we must always set the other states, when we update a single state\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         };\n//     }\n\n//     return state;\n// };\n\n//use toolkit instead\n// const store = createStore(counterReducer);\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\n\n/** no need to specifically set action types */\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","counter","showCounter","initialAuthState","isAuthenticated","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","authSlice","login","logout","store","reducer","auth","counterActions","actions","authActions"],"sources":["/Users/natnaelganoro/Documents/TechProjects/React/Section19-Redux/01-starting-project/src/store/index.js"],"sourcesContent":["// import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\nconst initialCounterState = { counter: 0, showCounter: true };\nconst initialAuthState = { isAuthenticated: true };\n\nconst counterSlice = createSlice({\n    name: 'counter',\n    initialState: initialCounterState,\n    reducers: {\n        increment(state) {\n            state.counter++;\n        },\n        decrement(state) {\n            state.counter--;\n        },\n        increase(state, action) {\n            state.counter = state.counter + action.payload;\n        },\n        toggleCounter(state) {\n            state.showCounter = !state.showCounter;\n        }\n    }\n});\n\nconst authSlice = createSlice({\n    name: 'authentication',\n    initialState: initialAuthState,\n    reducers: {\n        login(state) {\n            state.isAuthenticated = true;\n        },\n        logout(state) {\n            state.isAuthenticated = false;\n        },\n    }\n});\n \n// const counterReducer = (state = initialState, action) => {\n//     if (action.type === 'increment') {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter,\n//         };\n//     }\n\n//     if (action.type === 'increase') {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         };\n//     }\n\n//     if (action.type === 'decrement'){\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n\n//     if (action.type === 'toggle'){\n//         return {\n//             //we must always set the other states, when we update a single state\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         };\n//     }\n\n//     return state;\n// };\n\n\n//use toolkit instead\n// const store = createStore(counterReducer);\nconst store = configureStore({\n    reducer: { \n        counter: counterSlice.reducer, \n        auth: authSlice.reducer\n    }\n});\n\n/** no need to specifically set action types */\nexport const counterActions = counterSlice.actions;\n\nexport const authActions = authSlice.actions;\n\n\nexport default store;"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAC7D,MAAMC,gBAAgB,GAAG;EAAEC,eAAe,EAAE;AAAK,CAAC;AAElD,MAAMC,YAAY,GAAGP,WAAW,CAAC;EAC7BQ,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEP,mBAAmB;EACjCQ,QAAQ,EAAE;IACNC,SAASA,CAACC,KAAK,EAAE;MACbA,KAAK,CAACT,OAAO,EAAE;IACnB,CAAC;IACDU,SAASA,CAACD,KAAK,EAAE;MACbA,KAAK,CAACT,OAAO,EAAE;IACnB,CAAC;IACDW,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACpBH,KAAK,CAACT,OAAO,GAAGS,KAAK,CAACT,OAAO,GAAGY,MAAM,CAACC,OAAO;IAClD,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACjBA,KAAK,CAACR,WAAW,GAAG,CAACQ,KAAK,CAACR,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;AAEF,MAAMc,SAAS,GAAGlB,WAAW,CAAC;EAC1BQ,IAAI,EAAE,gBAAgB;EACtBC,YAAY,EAAEJ,gBAAgB;EAC9BK,QAAQ,EAAE;IACNS,KAAKA,CAACP,KAAK,EAAE;MACTA,KAAK,CAACN,eAAe,GAAG,IAAI;IAChC,CAAC;IACDc,MAAMA,CAACR,KAAK,EAAE;MACVA,KAAK,CAACN,eAAe,GAAG,KAAK;IACjC;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA,MAAMe,KAAK,GAAGpB,cAAc,CAAC;EACzBqB,OAAO,EAAE;IACLnB,OAAO,EAAEI,YAAY,CAACe,OAAO;IAC7BC,IAAI,EAAEL,SAAS,CAACI;EACpB;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAME,cAAc,GAAGjB,YAAY,CAACkB,OAAO;AAElD,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACO,OAAO;AAG5C,eAAeJ,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}